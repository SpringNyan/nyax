(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{107:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var o=t(2),a=(t(0),t(118));const r={id:"getting-started",title:"\u5feb\u901f\u5f00\u59cb"},i={id:"introduction/getting-started",isDocsHomePage:!1,title:"\u5feb\u901f\u5f00\u59cb",description:"Nyax \u662f\u4e00\u4e2a\u57fa\u4e8e Redux \u7684\u6846\u67b6\uff0c\u65e8\u5728\u63d0\u4f9b\u5b8c\u5907\u7684 TypeScript \u7c7b\u578b\u63a8\u65ad\u63d0\u793a\u4ee5\u53ca\u5e94\u7528\u7684\u6a21\u5757\u5316\uff0c\u4e14\u6574\u5408\u4e86\u5e38\u7528\u7684 Redux \u65b9\u6848\u3002",source:"@site/docs\\introduction\\getting-started.md",permalink:"/introduction/getting-started",sidebar:"someSidebar",next:{title:"\u5b89\u88c5",permalink:"/introduction/installation"}},c=[{value:"\u7279\u6027",id:"\u7279\u6027",children:[]},{value:"\u5b89\u88c5",id:"\u5b89\u88c5",children:[]},{value:"\u57fa\u672c\u793a\u4f8b",id:"\u57fa\u672c\u793a\u4f8b",children:[]}],u={rightToc:c};function s({components:e,...n}){return Object(a.b)("wrapper",Object(o.a)({},u,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Nyax \u662f\u4e00\u4e2a\u57fa\u4e8e Redux \u7684\u6846\u67b6\uff0c\u65e8\u5728\u63d0\u4f9b\u5b8c\u5907\u7684 TypeScript \u7c7b\u578b\u63a8\u65ad\u63d0\u793a\u4ee5\u53ca\u5e94\u7528\u7684\u6a21\u5757\u5316\uff0c\u4e14\u6574\u5408\u4e86\u5e38\u7528\u7684 Redux \u65b9\u6848\u3002"),Object(a.b)("h2",{id:"\u7279\u6027"},"\u7279\u6027"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},'\u5b8c\u5907\u7684 TypeScript \u7c7b\u578b\u63a8\u65ad\u63d0\u793a\uff0c\u62d2\u7edd "AnyScript"'),Object(a.b)("li",{parentName:"ul"},"\u6574\u5408\u5e38\u7528\u7684 Redux \u65b9\u6848\uff0c\u6ee1\u8db3\u7edd\u5927\u90e8\u5206\u4e1a\u52a1\u9700\u6c42"),Object(a.b)("li",{parentName:"ul"},"\u5e94\u7528\u6a21\u5757\u5316\uff0c\u591a\u4e2a Model \u4e4b\u95f4\u53ef\u4ea4\u4e92"),Object(a.b)("li",{parentName:"ul"},"\u652f\u6301 Container \u7684\u52a8\u6001\u6ce8\u518c\u5378\u8f7d\uff0c\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u6ce8\u518c\u76f8\u540c Model \u7684\u591a\u4e2a\u72ec\u7acb\u7684 Container"),Object(a.b)("li",{parentName:"ul"},"\u57fa\u4e8e\u539f\u751f Redux\uff0c\u53ef\u4ee5\u81ea\u7531\u8fdb\u884c\u989d\u5916\u5b9a\u5236")),Object(a.b)("h2",{id:"\u5b89\u88c5"},"\u5b89\u88c5"),Object(a.b)("p",null,"Nyax \u4f9d\u8d56\u4e8e ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/reduxjs/redux"}),"Redux"),"\uff0c",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/redux-observable/redux-observable"}),"Redux Observable"),"\uff0c",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/ReactiveX/rxjs"}),"RxJS")," \u548c ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/immerjs/immer"}),"Immer"),"\u3002"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"npm install nyax redux redux-observable rxjs immer\n")),Object(a.b)("h2",{id:"\u57fa\u672c\u793a\u4f8b"},"\u57fa\u672c\u793a\u4f8b"),Object(a.b)("p",null,"\u57fa\u672c\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u8ba1\u6570\u5668\u5e94\u7528\u4ee5\u53ca\u4e0e React \u8fdb\u884c\u96c6\u6210\u3002"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import { createModel, createModelBase, createNyax } from "nyax";\nimport React, { useContext, useState } from "react";\nimport ReactDOM from "react-dom";\nimport { Provider, useSelector } from "react-redux";\n\ninterface Dependencies {\n  generateRandomNumber: () => number;\n}\n\nconst ModelBase = createModelBase<Dependencies>();\n\nconst CounterModel = createModel(\n  class extends ModelBase {\n    public initialState() {\n      return {\n        title: "Counter",\n        count: 0,\n      };\n    }\n\n    public selectors() {\n      return {\n        text: () => `${this.state.title} - ${this.state.count}`,\n      };\n    }\n\n    public reducers() {\n      return {\n        setTitle: (value: string) => {\n          this.state.title = value;\n        },\n        setCount: (value: number) => {\n          this.state.count = value;\n        },\n        increase: () => {\n          this.state.count += 1;\n        },\n        decrease: () => {\n          this.state.count -= 1;\n        },\n      };\n    }\n\n    public effects() {\n      return {\n        randomCount: async () => {\n          const count = this.dependencies.generateRandomNumber();\n          await this.actions.setCount.dispatch(count);\n        },\n      };\n    }\n  }\n);\n\nconst dependencies: Dependencies = {\n  generateRandomNumber: () => Math.floor(Math.random() * 1000),\n};\nconst nyax = createNyax({\n  dependencies,\n});\n\nconst rootModels = {\n  counter: CounterModel,\n};\nnyax.registerModels(rootModels);\n\nconst GetContainerContext = React.createContext(nyax.getContainer);\n\nconst Counter = React.memo(() => {\n  const getContainer = useContext(GetContainerContext);\n  const counterContainer = getContainer(CounterModel);\n\n  const title = useSelector(() => counterContainer.state.title);\n  const count = useSelector(() => counterContainer.state.count);\n  const text = useSelector(() => counterContainer.getters.text);\n\n  const [titleInputValue, setTitleInputValue] = useState("");\n  const [countInputValue, setCountInputValue] = useState("");\n\n  return (\n    <div>\n      <div>Title: {title}</div>\n      <div>Count: {count}</div>\n      <div>Text: {text}</div>\n\n      <div>\n        <input\n          type="text"\n          value={titleInputValue}\n          onChange={(event) => setTitleInputValue(event.target.value)}\n        />\n        <button\n          onClick={() =>\n            counterContainer.actions.setTitle.dispatch(titleInputValue)\n          }\n        >\n          setTitle\n        </button>\n      </div>\n      <div>\n        <input\n          type="text"\n          value={countInputValue}\n          onChange={(event) => setCountInputValue(event.target.value)}\n        />\n        <button\n          onClick={() =>\n            counterContainer.actions.setCount.dispatch(\n              parseInt(countInputValue)\n            )\n          }\n        >\n          setCount\n        </button>\n      </div>\n      <div>\n        <button onClick={() => counterContainer.actions.increase.dispatch({})}>\n          increase\n        </button>\n        <button onClick={() => counterContainer.actions.decrease.dispatch({})}>\n          decrease\n        </button>\n        <button\n          onClick={() => counterContainer.actions.randomCount.dispatch({})}\n        >\n          random\n        </button>\n      </div>\n    </div>\n  );\n});\n\nReactDOM.render(\n  <GetContainerContext.Provider value={nyax.getContainer}>\n    <Provider store={nyax.store}>\n      <Counter />\n    </Provider>\n  </GetContainerContext.Provider>,\n  document.getElementById("root")\n);\n')))}s.isMDXComponent=!0}}]);